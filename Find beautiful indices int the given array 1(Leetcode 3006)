class Solution {
    public static int[] findlps(String pat){
        int lps[]=new int[pat.length()];
        lps[0]=0;
        int length=0;
        int i=1;
        while(i<pat.length()){
            if(pat.charAt(i)==pat.charAt(length)){
                length++;
                lps[i]=length;
                i++;
            }
            else{
                if(length!=0)
                    length=lps[length-1];
                else{
                    lps[i]=0;
                    i++;
                }
            }
        }
        return lps;
    }
    public static ArrayList<Integer> kmp(String txt,String pat){
        int m=txt.length();
        int n=pat.length();
        int lps[]=findlps(pat);
        ArrayList<Integer> list=new ArrayList<>();
        
        int i=0;
        int j=0;
        while(i<m){
    
            if(j<n && txt.charAt(i)==pat.charAt(j)){
                i++;
                j++;
            }
            
            if(j==n){
                list.add(i-n);
                j=lps[j-1];
            }
            
            if(i<m && txt.charAt(i)!=pat.charAt(j)){
                if(j!=0)
                   j=lps[j-1]; 
                else
                    i++;
            }
        }
        return list;
    }
    public List<Integer> beautifulIndices(String s, String a, String b, int k) {
        ArrayList<Integer> a1=kmp(s,a);
        ArrayList<Integer> a2=kmp(s,b);
        ArrayList<Integer> ans=new ArrayList<>();
        for(int i=0;i<a1.size();i++){
            for(int j=0;j<a2.size();j++){
                if(Math.abs(a1.get(i)-a2.get(j))<=k){
                    ans.add(a1.get(i));
                    break;
                }
            }
        }
        return ans;
        
    }
}
